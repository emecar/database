. venv/scripts/activate
pip show psycopg2-binary
docker compose up -d
mkdir psycopg2
cd psycopg2
touch veggies.py #use this file to demonstrate how the psycopg2 database adapter can be used to connect to and interact with a PostgreSQL database from a Python file. 

import psycopg2

# Connect to your postgres DB
conn = psycopg2.connect(
    """
    dbname=week3 
    user=postgres 
    host=localhost 
    port=5432
    """
)

#Alternatively 
############
connection_string = "postgresql://username:password@host:port/database_name"
conn = psycopg2.connect(connection_string)
############

#set a property to autocommit our changes to the database.
conn.set_session(autocommit=True)

# Open a cursor to perform database operations
cur = conn.cursor()

#use the execute() method to run raw SQL statements, formatted using multiline strings.
cur.execute(
    """
    DROP TABLE IF EXISTS veggies
    """
)

cur.execute(
    """
    CREATE TABLE veggies(
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        color TEXT NOT NULL
    )
    """
)

cur.execute(
    """
    INSERT INTO veggies VALUES 
    (1, 'carrot', 'orange'),
    (2, 'onion', 'yellow'),
    (3, 'zucchini', 'green'),
    (4, 'squash', 'yellow'),
    (5, 'pepper', 'red'),
    (6, 'onion', 'red')
    """
)


cur.execute(
    """
    SELECT * FROM veggies
    """
)

# Retrieve query results to make the result set that we just selected available to our program as a Python list of tuples.
records = cur.fetchall()

print(records)

SELECT formatting
========================
print('')  # new line

cur.execute(
    """
    SELECT color, name FROM veggies ORDER BY name, color
    """
)

veggie_records = cur.fetchall()


for i, v in enumerate(veggie_records):
    print(str(i+1) + ".", v[0].capitalize(), v[1].capitalize())

python veggies.py
























